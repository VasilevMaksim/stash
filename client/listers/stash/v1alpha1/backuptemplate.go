/*
Copyright 2019 The Stash Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/appscode/stash/apis/stash/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BackupTemplateLister helps list BackupTemplates.
type BackupTemplateLister interface {
	// List lists all BackupTemplates in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.BackupTemplate, err error)
	// BackupTemplates returns an object that can list and get BackupTemplates.
	BackupTemplates(namespace string) BackupTemplateNamespaceLister
	BackupTemplateListerExpansion
}

// backupTemplateLister implements the BackupTemplateLister interface.
type backupTemplateLister struct {
	indexer cache.Indexer
}

// NewBackupTemplateLister returns a new BackupTemplateLister.
func NewBackupTemplateLister(indexer cache.Indexer) BackupTemplateLister {
	return &backupTemplateLister{indexer: indexer}
}

// List lists all BackupTemplates in the indexer.
func (s *backupTemplateLister) List(selector labels.Selector) (ret []*v1alpha1.BackupTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BackupTemplate))
	})
	return ret, err
}

// BackupTemplates returns an object that can list and get BackupTemplates.
func (s *backupTemplateLister) BackupTemplates(namespace string) BackupTemplateNamespaceLister {
	return backupTemplateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BackupTemplateNamespaceLister helps list and get BackupTemplates.
type BackupTemplateNamespaceLister interface {
	// List lists all BackupTemplates in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.BackupTemplate, err error)
	// Get retrieves the BackupTemplate from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.BackupTemplate, error)
	BackupTemplateNamespaceListerExpansion
}

// backupTemplateNamespaceLister implements the BackupTemplateNamespaceLister
// interface.
type backupTemplateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BackupTemplates in the indexer for a given namespace.
func (s backupTemplateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BackupTemplate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BackupTemplate))
	})
	return ret, err
}

// Get retrieves the BackupTemplate from the indexer for a given namespace and name.
func (s backupTemplateNamespaceLister) Get(name string) (*v1alpha1.BackupTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("backuptemplate"), name)
	}
	return obj.(*v1alpha1.BackupTemplate), nil
}

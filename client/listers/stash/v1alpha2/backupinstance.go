/*
Copyright 2019 The Stash Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/appscode/stash/apis/stash/v1alpha2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BackupInstanceLister helps list BackupInstances.
type BackupInstanceLister interface {
	// List lists all BackupInstances in the indexer.
	List(selector labels.Selector) (ret []*v1alpha2.BackupInstance, err error)
	// BackupInstances returns an object that can list and get BackupInstances.
	BackupInstances(namespace string) BackupInstanceNamespaceLister
	BackupInstanceListerExpansion
}

// backupInstanceLister implements the BackupInstanceLister interface.
type backupInstanceLister struct {
	indexer cache.Indexer
}

// NewBackupInstanceLister returns a new BackupInstanceLister.
func NewBackupInstanceLister(indexer cache.Indexer) BackupInstanceLister {
	return &backupInstanceLister{indexer: indexer}
}

// List lists all BackupInstances in the indexer.
func (s *backupInstanceLister) List(selector labels.Selector) (ret []*v1alpha2.BackupInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.BackupInstance))
	})
	return ret, err
}

// BackupInstances returns an object that can list and get BackupInstances.
func (s *backupInstanceLister) BackupInstances(namespace string) BackupInstanceNamespaceLister {
	return backupInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BackupInstanceNamespaceLister helps list and get BackupInstances.
type BackupInstanceNamespaceLister interface {
	// List lists all BackupInstances in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha2.BackupInstance, err error)
	// Get retrieves the BackupInstance from the indexer for a given namespace and name.
	Get(name string) (*v1alpha2.BackupInstance, error)
	BackupInstanceNamespaceListerExpansion
}

// backupInstanceNamespaceLister implements the BackupInstanceNamespaceLister
// interface.
type backupInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BackupInstances in the indexer for a given namespace.
func (s backupInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.BackupInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.BackupInstance))
	})
	return ret, err
}

// Get retrieves the BackupInstance from the indexer for a given namespace and name.
func (s backupInstanceNamespaceLister) Get(name string) (*v1alpha2.BackupInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("backupinstance"), name)
	}
	return obj.(*v1alpha2.BackupInstance), nil
}
